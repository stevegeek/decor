---
title: Component Reference
label: Component Reference
---

# Component Reference

Autogenerated complete reference for all Decor UI components with usage examples and parameters.

If you find any issues or missing components, please open a PR to improve the documentation generation script.

---

## Table of Contents

### Core Components
- [Decor::Avatar](#decoravatar)
- [Decor::Badge](#decorbadge)
- [Decor::Banner](#decorbanner)
- [Decor::Box](#decorbox)
- [Decor::Button](#decorbutton)
- [Decor::ButtonLink](#decorbuttonlink)
- [Decor::Card](#decorcard)
- [Decor::Carousel](#decorcarousel)
- [Decor::Dropdown](#decordropdown)
- [Decor::DropdownItem](#decordropdownitem)
- [Decor::Flash](#decorflash)
- [Decor::FlowStep](#decorflowstep)
- [Decor::Icon](#decoricon)
- [Decor::Link](#decorlink)
- [Decor::Notification](#decornotification)
- [Decor::NotificationManager](#decornotificationmanager)
- [Decor::Progress](#decorprogress)
- [Decor::Spinner](#decorspinner)
- [Decor::Tag](#decortag)
- [Decor::Title](#decortitle)
- [Decor::Tooltip](#decortooltip)

### Form Components
- [Decor::Forms::ButtonRadioGroup](#decorformsbuttonradiogroup)
- [Decor::Forms::Checkbox](#decorformscheckbox)
- [Decor::Forms::DateCalendar](#decorformsdatecalendar)
- [Decor::Forms::ErrorIconSection](#decorformserroriconsection)
- [Decor::Forms::ExpandingCheckboxCollection](#decorformsexpandingcheckboxcollection)
- [Decor::Forms::FileUpload](#decorformsfileupload)
- [Decor::Forms::Form](#decorformsform)
- [Decor::Forms::FormFieldLayout](#decorformsformfieldlayout)
- [Decor::Forms::HelperTextSection](#decorformshelpertextsection)
- [Decor::Forms::HiddenField](#decorformshiddenfield)
- [Decor::Forms::LayoutContainer](#decorformslayoutcontainer)
- [Decor::Forms::LayoutSection](#decorformslayoutsection)
- [Decor::Forms::NumberField](#decorformsnumberfield)
- [Decor::Forms::Radio](#decorformsradio)
- [Decor::Forms::Select](#decorformsselect)
- [Decor::Forms::Switch](#decorformsswitch)
- [Decor::Forms::TextArea](#decorformstextarea)
- [Decor::Forms::TextField](#decorformstextfield)

### Navigation Components
- [Decor::Nav::Breadcrumbs](#decornavbreadcrumbs)
- [Decor::Nav::CompactFooter](#decornavcompactfooter)
- [Decor::Nav::Footer](#decornavfooter)
- [Decor::Nav::SecondaryNavbar](#decornavsecondarynavbar)
- [Decor::Nav::SideNavbar](#decornavsidenavbar)
- [Decor::Nav::SideNavbarItem](#decornavsidenavbaritem)
- [Decor::Nav::SideNavbarSection](#decornavsidenavbarsection)
- [Decor::Nav::SideNavbarSubItem](#decornavsidenavbarsubitem)
- [Decor::Nav::TopNavbar](#decornavtopnavbar)

### Data Display Components
- [Decor::Pagination](#decorpagination)
- [Decor::Stat](#decorstat)
- [Decor::Stats](#decorstats)
- [Decor::Tables::DataTable](#decortablesdatatable)
- [Decor::Tables::DataTableBuilder](#decortablesdatatablebuilder)
- [Decor::Tables::DataTableCell](#decortablesdatatablecell)
- [Decor::Tables::DataTableFooter](#decortablesdatatablefooter)
- [Decor::Tables::DataTableHeaderCell](#decortablesdatatableheadercell)
- [Decor::Tables::DataTableHeaderRow](#decortablesdatatableheaderrow)
- [Decor::Tables::DataTableRow](#decortablesdatatablerow)
- [Decor::Tabs](#decortabs)

### Modal Components
- [Decor::Modals::ConfirmModal](#decormodalsconfirmmodal)
- [Decor::Modals::Modal](#decormodalsmodal)
- [Decor::Modals::ModalCloseButton](#decormodalsmodalclosebutton)
- [Decor::Modals::ModalLayout](#decormodalsmodallayout)
- [Decor::Modals::ModalOpenButton](#decormodalsmodalopenbutton)

### Layout & Utility Components
- [Decor::Chat::List](#decorchatlist)
- [Decor::Chat::ListMessage](#decorchatlistmessage)
- [Decor::ClickToCopy](#decorclicktocopy)
- [Decor::CodeBlock](#decorcodeblock)
- [Decor::CodeSnippet](#decorcodesnippet)
- [Decor::Element](#decorelement)
- [Decor::EmptyState](#decoremptystate)
- [Decor::FormattedEncodedId](#decorformattedencodedid)
- [Decor::Map](#decormap)
- [Decor::Page](#decorpage)
- [Decor::PageHeader](#decorpageheader)
- [Decor::PageSection](#decorpagesection)
- [Decor::Panel](#decorpanel)
- [Decor::PanelGroup](#decorpanelgroup)
- [Decor::SearchAndFilter](#decorsearchandfilter)
- [Decor::SearchResultsDropdown](#decorsearchresultsdropdown)
- [Decor::Svg](#decorsvg)
- [Decor::SwitchingBox](#decorswitchingbox)
- [Decor::Toggle](#decortoggle)

---

## Shared Component Properties

Most Decor components inherit from `PhlexComponent` which includes the following shared property modules. These properties are available on all components unless explicitly redefined:

### Sizes

Provides size variants for component sizing.

**Property:** `size`

**Default values:** `:xs`, `:sm`, `:md`, `:lg`, `:xl`

**Size aliases:** 
- `:small` → `:sm`
- `:medium` → `:md`
- `:large` → `:lg`
- `:micro`, `:extra_small` → `:xs`
- `:extra_large` → `:xl`

### Colors

Provides semantic color variants following the DaisyUI color system.

**Property:** `color`

**Default values:** `:base`, `:primary`, `:secondary`, `:accent`, `:neutral`, `:success`, `:error`, `:warning`, `:info`

### Styles

Provides visual style variants for component appearance.

**Property:** `style`

**Default values:** `:filled`, `:outlined`, `:ghost`

**Note:** When a component redefines these values, it will be noted in that component's documentation section.

---

## Core Components

### Decor::Avatar

<span id="decoravatar"></span>

Avatars An avatar is a small image that represents a user. It can display the initials of the user's name or the user's profile picture. It can be square or circular, and of many different sizes.

**Basic Usage:**
```ruby
render Decor::Avatar.new do
  "Content goes here"
end
```

**Key Attributes:**
- `url` (String(&:present??)) (optional)
- `initials` (String(&:present??)) (optional)
- `shape` (Union[:circle, :square], default: :circle) (optional) - Default: `:circle`
- `ring` (Boolean, default: false) (optional) - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:neutral`
- `style`: `:filled`

---

### Decor::Badge

<span id="decorbadge"></span>

Badge A Badge is a small rectangular element which can be used to label sections of the view. Supports icons, avatars, different styles, sizes, and variants.

**Basic Usage:**
```ruby
render Decor::Badge.new do
  "Content goes here"
end
```

**Key Attributes:**
- `label` (String?) (optional)
- `dashed` (Boolean, default: false) (optional) - Default: `false`
- `icon` (String?) (optional)
- `url` (String?) (optional) - Optional avatar
- `initials` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:neutral`
- `style`: `:outlined`

---

### Decor::Banner

<span id="decorbanner"></span>

Banner A banner is a large alert component that is used to display important messages to the user. Supports different styles, icons, links, and layout options using daisyUI alert styling.

**Basic Usage:**
```ruby
render Decor::Banner.new do
  "Content goes here"
end
```

**Key Attributes:**
- `icon` (String?) (optional)
- `link` (String(&:present??)) (optional)
- `style` (Union[:warning, :info, :error, :notice, :standard, :success], default: :notice) (optional) - Default: `:notice`
- `centered` (Boolean, default: false) (optional) - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::Box

<span id="decorbox"></span>

Box A daisyUI card-styled box component with title, description, and content areas. Features light grey background for better visual separation.

**Basic Usage:**
```ruby
render Decor::Box.new do
  "Content goes here"
end
```

**Key Attributes:**
- `title` (String?) (optional)
- `description` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:base`
- `style`: `:outlined`

---

### Decor::Button

<span id="decorbutton"></span>

Buttons A styled button component with daisyUI styling. Supports different themes, variants, sizes, and states.

**Basic Usage:**
```ruby
render Decor::Button.new do |c|
  c.with_before_label do
    # Slot content
  end
  "Content goes here"
end
```

**Key Attributes:**
- `label` (String?) (optional)
- `icon` (String?) (optional) - An icon name to render before the label
- `icon_variant` (Symbol?) (optional)
- `icon_only_on_mobile` (Boolean, default: false) (optional) - Default: `false`
- `disabled` (Boolean, default: false) (optional) - Default: `false`
- `full_width` (Boolean, default: false) (optional) - Whether button should span the entire width of the container or not - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:base`
- `style`: `:filled`

**Slot Methods:**
- `with_before_label`
- `with_after_label`

---

### Decor::ButtonLink

<span id="decorbuttonlink"></span>

ButtonLinks A button that is rendered with a link tag when enabled, or as a button when disabled. Supports all Button styling with ActsAsLink functionality.

**Basic Usage:**
```ruby
render Decor::ButtonLink.new
```

**Key Attributes:**
- `href` (String(&:present??)) (optional) - Link href
- `target` (String(&:present??)) (optional) - Link target
- `data` (Hash?) (optional) - Data attributes for custom data
- `http_method` (Union[:get, :put, :post, :patch, :delete?]) (optional) - HTTP method for Turbo forms
- `turbo_frame` (String?) (optional) - Turbo frame target
- `turbo_prefetch` (Union[:hover, :viewport?]) (optional) - Turbo prefetch behavior
- `turbo_confirm` (String?) (optional) - Turbo confirmation prompt
- `turbo` (Boolean, default: true) (optional) - Turbo frame target - Default: `true`


---

### Decor::Card

<span id="decorcard"></span>

Card A card is a container for content which has a border and a shadow. Cards can have a title attribute or use a header slot for more complex headers. They support images in different positions, various colors, sizes, and styles.

**Basic Usage:**
```ruby
render Decor::Card.new do
  "Content goes here"
end
```

**Key Attributes:**
- `title` (String?) (optional)
- `image_url` (String?) (optional)
- `image_position` (Union[:top, :bottom, :left, :right], default: :top) (optional) - Default: `:top`
- `image_alt` (String, default: "") (optional) - Default: `""`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:base`
- `style`: `:filled`

---

### Decor::Carousel

<span id="decorcarousel"></span>

Carousel A swipable container component for displaying a series of elements. Perfect for image galleries, testimonials, product showcases, or any content that benefits from horizontal scrolling. Built with DaisyUI carousel styling and supports both images and custom content.

**Basic Usage:**
```ruby
render Decor::Carousel.new do |c|
  c.with_slide do
    # Slot content
  end
  "Content goes here"
end
```

**Key Attributes:**
- `images` (Array(Hash?)) (optional)
- `slides_per_view` (Integer?) (optional)
- `max_height` (Integer?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

**Slot Methods:**
- `with_slide`
- `with_items`

---

### Decor::Dropdown

<span id="decordropdown"></span>

Dropdown A dropdown is a menu that displays when a target button is clicked. Now supports modern DaisyUI attributes for consistent styling.

**Basic Usage:**
```ruby
render Decor::Dropdown.new do |c|
  c.with_menu_item do
    # Slot content
  end
  "Content goes here"
end
```

**Key Attributes:**
- `position` (Union[:left, :right, :top, :bottom, :end, :center, :start], default: :left) (optional) - Default: `:left`
- `trigger` (Union[:click, :hover, :focus], default: :click) (optional) - Default: `:click`
- `force_open` (Union[:auto, :open, :closed], default: :auto) (optional) - Default: `:auto`
- `button_classes` (Array(String), default: -> { [] }) (optional) - Default: `[]`
- `button_active_classes` (Array(String), default: -> { [] }) (optional) - Default: `[]`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:base`
- `style`: `:filled`

**Slot Methods:**
- `with_menu_item`

---

### Decor::DropdownItem

<span id="decordropdownitem"></span>

Dropdown Item A dropdown item represents a single menu item within a dropdown component. Can display text, icons, and act as separators.

**Basic Usage:**
```ruby
render Decor::DropdownItem.new do
  "Content goes here"
end
```

**Key Attributes:**
- `separator` (Boolean, default: false) (optional) - Default: `false`
- `text` (String?) (optional)
- `href` (String, default: "#") (optional) - Default: `"#"`
- `http_method` (Union[:get, :post, :patch, :delete?]) (optional) - "
- `tabindex` (Integer, default: -1) (optional) - Default: `-1`
- `icon_name` (String?) (optional) - icon is not rendered at all and the menu item is left aligned.


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::Flash

<span id="decorflash"></span>

'Flash' or Alert banner A flash banner is displayed inline with other content. It's intention is to display prominent information related to the content of the page. A common use case for a flash banner is showing messages relating to form submissions (e.g. validation messages).

**Basic Usage:**
```ruby
render Decor::Flash.new do
  "Content goes here"
end
```

**Redefined Properties:**
- `styles`: `warning`, `info`, `error`, `notice`, `success`

**Key Attributes:**
- `title` (String?) (optional)
- `text` (String?) (optional)
- `preserve_flash` (Boolean, default: false) (optional) - Default: `false`
- `collapse_if_empty` (Boolean, default: true) (optional) - Default: `true`
- `flash_data` (ActionDispatch::Flash::FlashHash?) (optional)
- `controller_path` (String?) (optional)
- `action_name` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `style`: `:info`

---

### Decor::FlowStep

<span id="decorflowstep"></span>

FlowStep A flow step component for displaying sequential process steps. Features icons or numbers, titles, descriptions, and custom content. Commonly used for multi-step forms, onboarding flows, and process indicators.

**Basic Usage:**
```ruby
render Decor::FlowStep.new do
  "Content goes here"
end
```

**Key Attributes:**
- `title` (String?) (optional)
- `description` (String?) (optional)
- `step` (Integer?) (optional)
- `icon` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:info`
- `style`: `:filled`

---

### Decor::Icon

<span id="decoricon"></span>

Icon An Icon is an inline SVG icon that is read from a collection of SVG files in the assets directory. Inherits from Svg component, so supports all sizing and accessibility features. Set the color using `classes` prop. The icon can be inlined in the HTML or loaded externally.

**Basic Usage:**
```ruby
render Decor::Icon.new(name: "star")
```

**Redefined Properties:**
- `styles`: `outline`, `solid`, `small_solid`

**Key Attributes:**
- `inline` (Boolean, default: false) (optional) - Default: `false`
- `name` (String) (required)
- `file_name` (String?) (optional)
- `collection` (Union[:heroicons], default: :heroicons) (optional) - Default: `:heroicons`


---

### Decor::Link

<span id="decorlink"></span>

Link A styled anchor link component with daisyUI btn-link styling. Supports different themes for color, sizes, and disabled state.

**Basic Usage:**
```ruby
render Decor::Link.new
```

**Key Attributes:**
- `href` (String(&:present??)) (optional) - Link href
- `target` (String(&:present??)) (optional) - Link target
- `data` (Hash?) (optional) - Data attributes for custom data
- `http_method` (Union[:get, :put, :post, :patch, :delete?]) (optional) - HTTP method for Turbo forms
- `turbo_frame` (String?) (optional) - Turbo frame target
- `turbo_prefetch` (Union[:hover, :viewport?]) (optional) - Turbo prefetch behavior
- `turbo_confirm` (String?) (optional) - Turbo confirmation prompt
- `turbo` (Boolean, default: true) (optional) - Turbo frame target - Default: `true`


---

### Decor::Notification

<span id="decornotification"></span>

Notification A notification component styled like daisyUI inline alerts with join layout. Supports different styles, icons, avatars, titles, descriptions, and action buttons.

**Basic Usage:**
```ruby
render Decor::Notification.new(label: "Label", title: "Title") do
  "Content goes here"
end
```

**Key Attributes:**
- `label` (String) (required) - If `action_name` is provided, it will be used for Stimulus actions.
- `href` (String?) (optional)
- `action_name` (String?) (optional)
- `primary` (Boolean, default: false, predicate: :public) (optional) - Default: `false`
- `color` (Symbol?) (optional)
- `style` (Symbol?) (optional)
- `title` (String) (required)
- `description` (String?) (optional)
- `icon` (String?) (optional)
- `action_buttons` (Array(ActionButton), default: -> { [] }) (optional) - Default: `[]`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `color`: `:info`

---

### Decor::NotificationManager

<span id="decornotificationmanager"></span>

NotificationManager The NotificationManager is a component which provides the mechanism and display area for notifications or alerts that slide into view in the top right of the screen. In general we may render only 1 NotificationManager at a time & then reuse it at runtime by adding notifications via the JS part of the component.



Event API - `decor--notification-manager:show@window` - Show notification - `decor--notification-manager:dismissAll@window` - Dismiss all notifications - `decor--notification-manager:dismiss@window` - Dismiss single notification



Event Detail Options - `content` - HTML content (must be marked safe) - `contentHref` - URL for remote content - `timeout` - Auto-dismiss timeout (default 3000ms, Infinity for persistent) Basic text notifications with different content

**Basic Usage:**
```ruby
render Decor::NotificationManager.new
```

---

### Decor::Progress

<span id="decorprogress"></span>

Progress Component ================== A versatile progress component for showing completion through multi-step processes. Supports DaisyUI-powered features with multiple styles, colors, and sizes.



Features - **Multiple Styles**: Steps-only, progress bar-only, or combined display - **Color Themes**: 7 semantic color options for different contexts - **Size Options**: 4 sizes from extra small to large - **Accessibility**: Proper ARIA labels and semantic HTML - **Interactive**: Clickable completed steps with optional links

**Basic Usage:**
```ruby
render Decor::Progress.new(label_key: "...")
```

**Key Attributes:**
- `label_key` (String) (required)
- `href` (String?) (optional)
- `steps` (Array(ProgressItem), default: -> { [] } do |items|) (optional) - Default: `-> { [] } do |items|`
- `i18n_key` (String?) (optional)
- `current_step` (Integer, default: 1) (optional) - Default: `1`
- `style` (Union[:steps, :progress, :both], default: :steps) (optional) - Default: `:steps`
- `show_numbers` (Boolean, default: true) (optional) - Default: `true`
- `vertical` (Boolean, default: false) (optional) - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:primary`

---

### Decor::Spinner

<span id="decorspinner"></span>

Spinner Loading spinner with configurable size and color. A spinner is used to indicate that content is loading or processing. It can be customized with different styles, sizes, and colors to match your design.

**Basic Usage:**
```ruby
render Decor::Spinner.new
```

**Redefined Properties:**
- `styles`: `spinner`, `dots`, `ring`, `ball`, `bars`, `infinity`

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:neutral`
- `style`: `:spinner`

---

### Decor::Tag

<span id="decortag"></span>

Tag A modern tag/badge component built with DaisyUI styling. Tags can display simple labels, include icons, and optionally show a close button for removal functionality.



Features - **DaisyUI Integration**: Uses DaisyUI badge classes for consistent theming - **Icon Support**: Optional leading icons using Decor::Icon - **Removable Tags**: Optional close button (removal logic handled by parent components) - **Multiple Styles**: Filled, outlined, and ghost styles - **Semantic Colors**: Full DaisyUI color palette support - **Size Options**: 4 sizes from xs to lg



Note on Removable Tags When `removable: true`, the tag renders a close button with an X icon. The actual removal logic should be handled by parent components or separate controllers, not by the Tag itself.

**Basic Usage:**
```ruby
render Decor::Tag.new do
  "Content goes here"
end
```

**Key Attributes:**
- `label` (String?) (optional)
- `icon` (String?) (optional) - Icon to display before the label
- `removable` (Boolean, default: false) (optional) - Whether the tag can be removed with a close button - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:neutral`
- `style`: `:filled`

---

### Decor::Title

<span id="decortitle"></span>

Title A reusable title component with configurable size, optional icon, description, and CTA area. Used across components for consistent title styling.

**Basic Usage:**
```ruby
render Decor::Title.new do
  "Content goes here"
end
```

**Key Attributes:**
- `title` (String?) (optional)
- `description` (String?) (optional)
- `icon` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`

---

### Decor::Tooltip

<span id="decortooltip"></span>

Tooltips A tooltip is a small popover that displays additional information about something when the user hovers over it. Supports different positions, sizes, colors, and styles.

**Basic Usage:**
```ruby
render Decor::Tooltip.new do |c|
  c.with_tip_content do
    # Slot content
  end
  "Content goes here"
end
```

**Key Attributes:**
- `position` (Union[:top, :bottom, :left, :right], default: :top) (optional) - Default: `:top`
- `tip_text` (String?) (optional)
- `offset_percent_x` (Integer, default: 0) (optional) - Offset customization - Default: `0`
- `offset_percent_y` (Integer, default: 0) (optional) - Default: `0`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:base`
- `style`: `:filled`

**Slot Methods:**
- `with_tip_content`

---

## Form Components

### Decor::Forms::ButtonRadioGroup

<span id="decorformsbuttonradiogroup"></span>

A ButtonRadioGroup is a radio group, styled as a set of toggle buttons. The behaviour is controlled by a StimulusJS controller. The component is a type of FormField component. Form field attrs

**Basic Usage:**
```ruby
render Decor::Forms::ButtonRadioGroup.new(choices: "...")
```

**Redefined Properties:**
- `styles`: `outlined`, `filled`, `ghost`, `link`

**Key Attributes:**
- `choices` (Array) (required)
- `selected_choice` (String?) (optional)
- `show_label` (Boolean, default: false) (optional) - Button groups mostly don't have labels - Default: `false`


---

### Decor::Forms::Checkbox

<span id="decorformscheckbox"></span>

Basic checkbox with label

**Basic Usage:**
```ruby
render Decor::Forms::Checkbox.new
```

**Key Attributes:**
- `label_position` (Union[:left, :right, :top], default: :right) (optional) - Default: `:right`


---

### Decor::Forms::DateCalendar

<span id="decorformsdatecalendar"></span>

Key examples demonstrating common use cases Basic single date selection

**Basic Usage:**
```ruby
render Decor::Forms::DateCalendar.new
```

**Key Attributes:**
- `calendar_type` (Union[:date, :range, :multi, :month], default: :date) (optional) - Calendar type - single date, range, or multi-select - Default: `:date`
- `min_date` (Union[Date, Time, DateTime?]) (optional) - Date constraints
- `max_date` (Union[Date, Time, DateTime?]) (optional)
- `months` (Integer, default: 1) (optional) - Display options - Default: `1`
- `first_day_of_week` (Integer(0..6), default: 0) (optional) - Default: `0`
- `locale` (String, default: "en-US") (optional) - Default: `"en-US"`
- `disabled_dates` (Array(String), default: -> { [] } do |dates|) (optional) - Date filtering options - Default: `-> { [] } do |dates|`
- `disabled_days_of_week` (Array(Integer), default: -> { [] }) (optional) - Default: `[]`
- `enabled_dates` (Array(String), default: -> { [] } do |dates|) (optional) - Default: `-> { [] } do |dates|`
- `enabled_days_of_week` (Array(Integer), default: -> { (0..6).toa }) (optional) - Default: `(0..6).to_a`


---

### Decor::Forms::ErrorIconSection

<span id="decorformserroriconsection"></span>

**Basic Usage:**
```ruby
render Decor::Forms::ErrorIconSection.new
```

**Key Attributes:**
- `error_text` (String?) (optional)
- `show_floating_message` (Boolean, default: false) (optional) - Default: `false`
- `tip_position` (Union[:top, :bottom, :left, :right], default: :right) (optional) - Default: `:right`
- `tip_offset_percent` (Integer, default: 30) (optional) - Default: `30`


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::Forms::ExpandingCheckboxCollection

<span id="decorformsexpandingcheckboxcollection"></span>

A ExpandingCheckboxCollection is a group of checkboxes. It shows a certain number of checkboxes, then hides the rest, which can be expanded by clicking a 'Show more' link. Behaviour is controlled by a StimulusJS controller. The component is a type of FormField component. Form field attrs

**Basic Usage:**
```ruby
render Decor::Forms::ExpandingCheckboxCollection.new do
  "Content goes here"
end
```

**Redefined Properties:**
- `styles`: `default`, `joined`

**Key Attributes:**
- `size` (Integer?) (optional)
- `hide_after_showing` (Integer?) (optional)


---

### Decor::Forms::FileUpload

<span id="decorformsfileupload"></span>

Standard file upload for documents

**Basic Usage:**
```ruby
render Decor::Forms::FileUpload.new
```

**Key Attributes:**
- `preview_layout` (Union[:stacked, :inline], default: :inline) (optional) - Default: `:inline`
- `description` (String, default: "Upload a .jpg or .png file, smaller than 5MB") (optional) - Default: `"Upload a .jpg or .png file`
- `file_mime_types` (String, default: "image/png,image/gif,image/jpeg") (optional) - Default: `"image/png`
- `aspect_w` (Integer?) (optional)
- `aspect_h` (Integer?) (optional)
- `clear_checkbox` (Boolean, default: true) (optional) - Default: `true`
- `existing_file_url` (String?) (optional)
- `file` (Any?) (optional)
- `preview_type` (Union[:file, :image, :avatar], default: :file) (optional) - Default: `:file`
- `theme` (Union[:primary, :secondary], default: :secondary) (optional) - Default: `:secondary`
- `initials` (String?) (optional)
- `shape` (Union[:circle, :square], default: :circle) (optional) - Default: `:circle`
- `max_size_in_mb` (Integer, default: 5) (optional) - Default: `5`


---

### Decor::Forms::Form

<span id="decorformsform"></span>

A form component that wraps Rails form_with helper with Stimulus functionality. Provides form validation, AJAX submission handling, and custom events.

**Basic Usage:**
```ruby
render Decor::Forms::Form.new do
  "Content goes here"
end
```

**Key Attributes:**
- `model` (Any?, default: -> { false }) (optional) - Default: `false`
- `url` (String?) (optional)
- `local` (Boolean, default: true) (optional) - Default: `true`
- `http_method` (Interface(:tos?)) (optional)
- `form_builder_class` (Class(ActionView::Helpers::FormBuilder), default: -> { ActionViewFormBuilder }) (optional) - Default: `ActionViewFormBuilder`
- `on_before` (Interface(:tos?)) (optional)
- `on_before_send` (Interface(:tos?)) (optional)
- `on_send` (Interface(:tos?)) (optional)
- `on_stopped` (Interface(:tos?)) (optional)
- `on_success` (Interface(:tos?)) (optional)
- `on_error` (Interface(:tos?)) (optional)
- `on_complete` (Interface(:tos?)) (optional)
- `namespace` (Interface(:tos?)) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::Forms::FormFieldLayout

<span id="decorformsformfieldlayout"></span>

**Basic Usage:**
```ruby
render Decor::Forms::FormFieldLayout.new(field_id: "...") do
  "Content goes here"
end
```

**Key Attributes:**
- `input_container_classes` (String?, default: "", reader: :private) (optional) - Default: `""`
- `form_field_element` (Any?) (optional)
- `field_id` (String(Predicate("present", &:present?))) (required) - The HTML ID of the form field.
- `label` (String?) (optional) - If the label is not set, no label will be rendered
- `description` (String?) (optional) - Renders under the label
- `disabled` (Boolean, default: false) (optional) - If the field is disabled - Default: `false`


---

### Decor::Forms::HelperTextSection

<span id="decorformshelpertextsection"></span>

**Basic Usage:**
```ruby
render Decor::Forms::HelperTextSection.new
```

**Key Attributes:**
- `helper_text` (String?) (optional)
- `error_text` (String?) (optional)
- `disabled` (Boolean, default: false) (optional) - Default: `false`
- `error_section` (Boolean, default: true) (optional) - Default: `true`
- `collapsing_helper_text` (Boolean, default: false) (optional) - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::Forms::HiddenField

<span id="decorformshiddenfield"></span>

Basic hidden field with a value

**Basic Usage:**
```ruby
render Decor::Forms::HiddenField.new
```

---

### Decor::Forms::LayoutContainer

<span id="decorformslayoutcontainer"></span>

Basic layout container with sections

**Basic Usage:**
```ruby
render Decor::Forms::LayoutContainer.new do |c|
  c.with_buttons do
    # Slot content
  end
  "Content goes here"
end
```

**Slot Methods:**
- `with_buttons`

---

### Decor::Forms::LayoutSection

<span id="decorformslayoutsection"></span>

Basic form section with title and description

**Basic Usage:**
```ruby
render Decor::Forms::LayoutSection.new(title: "Title") do |c|
  c.with_hero do
    # Slot content
  end
  "Content goes here"
end
```

**Key Attributes:**
- `title` (String) (required)
- `description` (String?) (optional)
- `flash` (Boolean, default: false) (optional) - Default: `false`
- `flash_message` (String?) (optional)
- `stacked` (Boolean, default: false) (optional) - Default: `false`
- `custom_content_wrapper` (Boolean, default: false) (optional) - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Slot Methods:**
- `with_hero`
- `with_cta`

---

### Decor::Forms::NumberField

<span id="decorformsnumberfield"></span>

A specialized text field for numeric input with mobile-optimized keyboards and float support. Inherits all TextField features including prefixes, suffixes, and add-ons. Basic number field

**Basic Usage:**
```ruby
render Decor::Forms::NumberField.new
```

**Key Attributes:**
- `type` (Symbol, default: :number) (optional) - `value` attribute is actually a string - Default: `:number`
- `numerical` (Boolean, default: true) (optional) - Default: `true`
- `allow_float_input` (Boolean, default: false) (optional) - Default: `false`
- `pattern` (String, default: -> {) (optional) - May want to consider the following in the future: https://github.com/filamentgroup/formcore#numeric-input - Default: `-> {`


---

### Decor::Forms::Radio

<span id="decorformsradio"></span>

Basic radio button

**Basic Usage:**
```ruby
render Decor::Forms::Radio.new
```

**Key Attributes:**
- `label_position` (Union[:left, :right], default: :right) (optional) - Default: `:right`


---

### Decor::Forms::Select

<span id="decorformsselect"></span>

Basic select with options

**Basic Usage:**
```ruby
render Decor::Forms::Select.new
```

**Key Attributes:**
- `options_array` (Array(Any), default: -> { [] }) (optional) - The <option>s in the select - Default: `[]`
- `selected_option` (String? do |value|) (optional)
- `disabled_options` (Array(Any?), default: -> { [] }) (optional) - Default: `[]`
- `include_blank_option` (Boolean, default: false) (optional) - This is useful for when you have no placeholder but want to include a blank option. - Default: `false`
- `disable_blank_option` (Boolean, default: true) (optional) - This option will disable selecting the blank option - Default: `true`
- `compact` (Boolean, default: false) (optional) - Default: `false`


---

### Decor::Forms::Switch

<span id="decorformsswitch"></span>

Basic switch with label

**Basic Usage:**
```ruby
render Decor::Forms::Switch.new
```

**Key Attributes:**
- `label_position` (Union[:top, :left, :right, :inline, :inside], default: :right) (optional) - Default: `:right`
- `submit_on_change` (Boolean, default: false) (optional) - Default: `false`
- `confirm_on_submit` (String(&:present??)) (optional)
- `confirm_on_submit_yes` (String(&:present??), default: "Yes, continue") (optional) - Default: `"Yes`
- `confirm_on_submit_no` (String(&:present??), default: "Cancel") (optional) - Default: `"Cancel"`


---

### Decor::Forms::TextArea

<span id="decorformstextarea"></span>

Multi-line text input field for capturing longer text content like comments, descriptions, or messages. Basic textarea with standard configuration

**Basic Usage:**
```ruby
render Decor::Forms::TextArea.new
```

**Key Attributes:**
- `rows` (Integer, default: 5) (optional) - HTML textarea size attributes by character rows and columns - Default: `5`
- `cols` (Integer?) (optional)
- `pattern` (String?) (optional) - A pattern to test against (a JavaScript Regex in a string)
- `maximum_length` (Integer?) (optional) - The min and max length HTML5 attributes are set with the following
- `minimum_length` (Integer?) (optional)


---

### Decor::Forms::TextField

<span id="decorformstextfield"></span>

Basic text field with label

**Basic Usage:**
```ruby
render Decor::Forms::TextField.new
```

**Key Attributes:**
- `html_size` (Integer?) (optional) - Optionally specify the HTML size attribute to control the width in characters of the textbox
- `leading_text_add_on` (String?) (optional) - Leading or trailing add-ons: text, icon or slot
- `trailing_text_add_on` (String?) (optional)
- `leading_icon_name` (String?) (optional)
- `trailing_icon_name` (String?) (optional)
- `add_on_style` (Union[:text, :boxed], default: :text) (optional) - The attached on-adds can either appear as text, or boxed in a gray container - Default: `:text`
- `type` (Symbol, default: :text) (optional) - NumberField or PasswordField) - Default: `:text`
- `pattern` (String?) (optional) - A pattern to test against (a JavaScript Regex in a string)
- `inputmode` (String?) (optional) - HTML inputmode attribute
- `numerical` (Boolean, default: false) (optional) - A numerical text field is a text field which only accepts numbers - Default: `false`
- `maximum_length` (Integer?) (optional) - The min and max length HTML5 attributes are set with the following
- `minimum_length` (Integer?) (optional)
- `validate_value_equal_to_id` (String?) (optional) - If set this will apply validation that value is same as value in field with ID
- `min` (Numeric?) (optional) - Attributes for text fields of type 'number'
- `max` (Numeric?) (optional) - The min and max length HTML5 attributes are set with the following
- `step` (Numeric?) (optional)
- `greater_than` (Numeric?) (optional)
- `less_than` (Numeric?) (optional)


---

## Navigation Components

### Decor::Nav::Breadcrumbs

<span id="decornavbreadcrumbs"></span>

Breadcrumbs Navigation breadcrumbs showing the user's current location within a hierarchy. Supports icons, disabled states, and mobile-responsive display with dropdown selection.

**Basic Usage:**
```ruby
render Decor::Nav::Breadcrumbs.new
```

**Key Attributes:**
- `name` (String?) (optional)
- `path` (String?) (optional)
- `current` (Boolean, default: false) (optional) - Default: `false`
- `icon` (String?) (optional)
- `disabled` (Boolean, default: false) (optional) - Default: `false`
- `show_home` (Boolean, default: true) (optional) - Default: `true`
- `home_path` (String, default: "/") (optional) - Default: `"/"`
- `home_icon` (String, default: "home") (optional) - Default: `"home"`
- `mobile_select` (Boolean, default: true) (optional) - Default: `true`
- `separator` (String, default: "chevron-right") (optional) - Default: `"chevron-right"`


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::Nav::CompactFooter

<span id="decornavcompactfooter"></span>

CompactFooter A minimal footer component optimized for small spaces and mobile views. Includes company name, social links, and essential footer links in a compact layout.

**Basic Usage:**
```ruby
render Decor::Nav::CompactFooter.new do |c|
  c.with_logo do
    # Slot content
  end
end
```

**Key Attributes:**
- `status_site_url` (String?) (optional)
- `footer_links` (Array(Object), default: -> { [].freeze }) (optional) - Default: `[].freeze`
- `show_logo` (Boolean, default: true) (optional) - Default: `true`


**Slot Methods:**
- `with_logo`
- `with_links`
- `with_copyright`

---

### Decor::Nav::Footer

<span id="decornavfooter"></span>

Footer A comprehensive footer component for displaying company information, navigation links, social media links, and newsletter signup forms. Supports multiple themes and layouts.

**Basic Usage:**
```ruby
render Decor::Nav::Footer.new(
  label: "Label",
  href: "/path",
  title: "Title",
  platform: "...",
  url: "/path",
  company_name: "..."
) do |c|
  c.with_logo do
    # Slot content
  end
end
```

**Key Attributes:**
- `label` (String) (required)
- `href` (String) (required)
- `external` (Boolean, default: false, predicate: :public) (optional) - Default: `false`
- `icon` (String?) (optional)
- `title` (String) (required)
- `links` (Array, default: [].freeze) (optional) - Default: `[].freeze`
- `visible` (Boolean, default: true) (optional) - Default: `true`
- `platform` (Symbol) (required)
- `url` (String) (required)
- `label` (String?) (optional)
- `visible` (Boolean, default: true) (optional) - Default: `true`
- `company_name` (String(Predicate("present", &:present?))) (required)
- `leads_model` (Object?) (optional)
- `leads_submit_path` (String?) (optional)
- `link_groups` (Array, default: [].freeze) (optional) - Default: `[].freeze`
- `social_links` (Array, default: [].freeze) (optional) - Default: `[].freeze`
- `theme` (Union[:light, :dark], default: :dark) (optional) - Default: `:dark`
- `show_newsletter` (Boolean, default: true) (optional) - Default: `true`
- `show_social` (Boolean, default: true) (optional) - Default: `true`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Slot Methods:**
- `with_logo`
- `with_content`
- `with_links`
- `with_copyright`

---

### Decor::Nav::SecondaryNavbar

<span id="decornavsecondarynavbar"></span>

**Basic Usage:**
```ruby
render Decor::Nav::SecondaryNavbar.new do |c|
  c.with_left do
    # Slot content
  end
end
```

**Redefined Properties:**
- `styles`: `wide`, `narrow`

**Key Attributes:**
- `bottom_border` (Boolean, default: false) (optional) - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `style`: `:narrow`

**Slot Methods:**
- `with_left`
- `with_center`
- `with_right`

---

### Decor::Nav::SideNavbar

<span id="decornavsidenavbar"></span>

SideNavbar A collapsible side navigation component that adapts to desktop and mobile views. Supports nested navigation items, counters, and expandable/collapsible states.

**Basic Usage:**
```ruby
render Decor::Nav::SideNavbar.new do |c|
  c.with_section do
    # Slot content
  end
end
```

**Key Attributes:**
- `app_title` (String(Predicate("present", &:present??))) (optional)
- `landscape_logo_url` (String?) (optional)
- `avatar_logo_url` (String?) (optional)
- `collapsed` (Boolean, default: false) (optional) - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Slot Methods:**
- `with_section`

---

### Decor::Nav::SideNavbarItem

<span id="decornavsidenavbaritem"></span>

**Basic Usage:**
```ruby
render Decor::Nav::SideNavbarItem.new(title: "Title") do |c|
  c.with_sub_item do
    # Slot content
  end
  "Content goes here"
end
```

**Key Attributes:**
- `title` (String(Predicate("present", &:present?))) (required)
- `icon` (String?) (optional)
- `path` (String?) (optional)
- `counter` (Integer?) (optional)
- `selected` (Boolean, default: false) (optional) - Also means 'expanded' where the sub items exist - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Slot Methods:**
- `with_sub_item`

---

### Decor::Nav::SideNavbarSection

<span id="decornavsidenavbarsection"></span>

**Basic Usage:**
```ruby
render Decor::Nav::SideNavbarSection.new do |c|
  c.with_item do
    # Slot content
  end
end
```

**Key Attributes:**
- `title` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

**Slot Methods:**
- `with_item`

---

### Decor::Nav::SideNavbarSubItem

<span id="decornavsidenavbarsubitem"></span>

**Basic Usage:**
```ruby
render Decor::Nav::SideNavbarSubItem.new(title: "Title")
```

**Key Attributes:**
- `title` (String(Predicate("present", &:present?))) (required)
- `icon` (String?) (optional)
- `path` (String, default: "#") (optional) - Default: `"#"`
- `selected` (Boolean, default: false) (optional) - " - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::Nav::TopNavbar

<span id="decornavtopnavbar"></span>

Basic navbar with brand only

**Basic Usage:**
```ruby
render Decor::Nav::TopNavbar.new do |c|
  c.with_brand do
    # Slot content
  end
end
```

**Key Attributes:**
- `has_search` (Boolean, default: true) (optional) - TODO: Remove need for this - Default: `true`
- `instant_search_path` (String?) (optional)
- `brand_text` (String?) (optional)
- `brand_href` (String, default: "/") (optional) - Default: `"/"`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Slot Methods:**
- `with_brand`
- `with_nav_items`
- `with_account_menu`
- `with_notifications_menu`

---

## Data Display Components

### Decor::Pagination

<span id="decorpagination"></span>

Pagination A DaisyUI-styled pagination component for navigating through pages of data. Supports responsive design, page size selection, result counts, and accessibility features.

**Basic Usage:**
```ruby
render Decor::Pagination.new(collection: "...")
```

**Key Attributes:**
- `page_size_selector` (Boolean, default: false) (optional) - Default: `false`
- `collection` (::Quo::Query) (required) - Pagination requires you pass a Quo::Query
- `total_count` (Integer?) (optional) - Also note if current_page is not set, it will be taken from the collection.
- `path` (String?) (optional) - and thus the path is implicit based on controller and action


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:base`
- `style`: `:filled`

---

### Decor::Stat

<span id="decorstat"></span>

Stat A Stat component displays statistical information in a structured, visually appealing format. Perfect for dashboards, analytics displays, and anywhere numerical data needs to be prominently featured. Supports icons, descriptions, actions, and various color themes.

**Basic Usage:**
```ruby
render Decor::Stat.new do
  "Content goes here"
end
```

**Key Attributes:**
- `value` (String?) (optional) - Main display value for the statistic
- `title` (String?) (optional) - Title/label for the statistic
- `description` (String?) (optional) - Description text below the value
- `centered` (Boolean, default: false) (optional) - Whether to center align the content - Default: `false`
- `icon` (String?) (optional) - Icon to display in the figure area
- `icon_color` (Union[:base, :primary, :secondary, :accent, :success, :error, :warning, :info, :neutral?]) (optional) - Icon color (if different from value color)
- `with_figure` (Boolean, default: false) (optional) - Whether to include a figure area - Default: `false`
- `with_actions` (Boolean, default: false) (optional) - Whether to include an actions area - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `color`: `:neutral`

---

### Decor::Stats

<span id="decorstats"></span>

**Basic Usage:**
```ruby
render Decor::Stats.new do
  "Content goes here"
end
```

**Key Attributes:**
- `orientation` (Union[:horizontal, :vertical], default: :horizontal) (optional) - Layout orientation for the stats - Default: `:horizontal`
- `shadow` (Boolean, default: true) (optional) - Whether to add shadow styling - Default: `true`
- `background` (Boolean, default: false) (optional) - Whether to add background styling - Default: `false`
- `responsive` (Boolean, default: false) (optional) - Responsive behavior - vertical on mobile, horizontal on desktop - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::Tables::DataTable

<span id="decortablesdatatable"></span>

A flexible table component for displaying tabulated data with support for sorting, selection, pagination, and various styling options. DataTables are typically constructed using DataTableBuilder for full application integration with sorting, filtering, and other advanced features. Basic Data Table A simple table with sortable headers and numeric columns.

**Basic Usage:**
```ruby
render Decor::Tables::DataTable.new do |c|
  c.with_data_table_header do
    # Slot content
  end
end
```

**Redefined Properties:**
- `styles`: `default`, `bordered`, `minimal`

**Key Attributes:**
- `title` (String?) (optional)
- `subtitle` (String?) (optional)
- `striped` (Boolean, default: true) (optional) - Default: `true`
- `compact` (Boolean, default: false) (optional) - Default: `false`
- `zebra` (Boolean, default: false) (optional) - Default: `false`
- `pin_rows` (Boolean, default: false) (optional) - Default: `false`
- `pin_cols` (Boolean, default: false) (optional) - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:base`
- `style`: `:default`

**Slot Methods:**
- `with_data_table_header`
- `with_search_and_filter`
- `with_data_table_header_row`
- `with_data_table_row`
- `with_pagination`
- `with_data_table_footer`

---

### Decor::Tables::DataTableBuilder

<span id="decortablesdatatablebuilder"></span>

A powerful table builder that provides automatic data fetching, sorting, filtering, and pagination. Use DataTableBuilder for complex tables that need server-side features and state management, or when working with ActiveRecord/Query objects. Basic Table Builder A simple table using an inline builder class with basic columns.

**Basic Usage:**
```ruby
render Decor::Tables::DataTableBuilder.new(
  params: "...",
  helpers: "...",
  row_nested_form: "..."
) do |c|
  c.with_cta do
    # Slot content
  end
end
```

**Key Attributes:**
- `params` (ActionController::Parameters, reader: :private) (required)
- `helpers` (Any, reader: :private) (required)
- `query` (Union[::Quo::Query, ::ActiveRecord::Relation, Array?], reader: :private) (optional) - An optional query object that the table is backed by
- `title` (String?, reader: :private) (optional) - Title to display top left of table header
- `subtitle` (String?, reader: :private) (optional)
- `alternating` (Boolean, default: false, reader: :private) (optional) - Whether rows should be striped or not - Default: `false`
- `hover_highlight` (Boolean, default: false, reader: :private) (optional) - Whether rows should be striped or not - Default: `false`
- `paginated` (Boolean, default: true, reader: :private) (optional) - Table has pagination - Default: `true`
- `header_height` (Union[:comfortable, :standard, :tight?], default: :standard, reader: :private) (optional) - The header row height - Default: `:standard`
- `row_height` (Union[:comfortable, :standard, :tight?], default: :standard, reader: :private) (optional) - The rows height - Default: `:standard`
- `rows_selectable_as_name` (Symbol?, reader: :private) (optional) - selection checkboxes
- `download_path` (String?, reader: :private) (optional)
- `row_nested_form` (Object, reader: :private) (required)
- `row_nested_form_attribute_name` (Symbol?, reader: :private) (optional)
- `html_options` (Hash, default: -> { {} }, reader: :private) (optional) - Default: `{}`
- `current_page` (Integer?, reader: :private) (optional) - Pagination props (set by merge_pagination_params)
- `page_size` (Integer?, reader: :private) (optional)
- `page_parameter_name` (Symbol, default: :page, reader: :private) (optional) - Pagination parameter names - Default: `:page`
- `page_size_parameter_name` (Symbol, default: :pagesize, reader: :private) (optional) - Default: `:page_size`
- `custom_page_sizes` (Array(Integer), default: -> { [] }, reader: :private) (optional) - Default: `[]`
- `sorted_direction` (Symbol?, reader: :private) (optional) - Sorting props (set by merge_sort_and_filter_params)
- `sort_by` (Symbol?, reader: :private) (optional)
- `sort_parameter_name` (Symbol, default: :sortby, reader: :private) (optional) - Default: `:sort_by`
- `sorted_direction_parameter_name` (Symbol, default: :sorteddirection, reader: :private) (optional) - Default: `:sorted_direction`
- `sorting_keys` (Array(Symbol), default: -> { [] }, reader: :private) (optional) - Default: `[]`
- `columns_hash` (Hash, default: -> { {} }, reader: :private) (optional) - Default: `{}`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Slot Methods:**
- `with_cta`

---

### Decor::Tables::DataTableCell

<span id="decortablesdatatablecell"></span>

**Basic Usage:**
```ruby
render Decor::Tables::DataTableCell.new do
  "Content goes here"
end
```

**Key Attributes:**
- `value` (Interface(:tos?)) (optional) - Could be a string or a number, or anything that will be coerced to a string
- `numeric` (Boolean, default: false) (optional) - Whether the cell contains numeric content or not - Default: `false`
- `colspan` (Integer?) (optional) - Number of columns to span. For a column header a colspan of zero means hide the column header
- `min_width_rem` (Numeric?) (optional) - Min width in rem of the cell
- `max_width` (Numeric?) (optional) - Max width in pixel of the cell # TODO: change to rem
- `content_clickable` (Boolean, default: false) (optional) - ensure the contents capture the mouse click event. - Default: `false`
- `stop_propagation` (Boolean, default: false) (optional) - The cell is meant to stop propagation of events - Default: `false`
- `path` (String?) (optional) - A cell can optionally link to another page.
- `emphasis` (Union[:regular, :low], default: :regular) (optional) - Typography emphasis - Default: `:regular`
- `weight` (Union[:light, :regular, :medium], default: :regular) (optional) - Typography weight - Default: `:regular`
- `row_height` (Union[:comfortable, :standard, :tight], default: :standard) (optional) - Row height - Default: `:standard`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `color`: `:base`

---

### Decor::Tables::DataTableFooter

<span id="decortablesdatatablefooter"></span>

Basic footer with a simple message

**Basic Usage:**
```ruby
render Decor::Tables::DataTableFooter.new(title: "Title", value: "value") do |c|
  c.with_left do
    # Slot content
  end
end
```

**Key Attributes:**
- `title` (String) (required)
- `value` (String) (required)
- `separator` (Union[:section, :final?]) (optional)
- `summary_lines` (Array(FooterSummaryLine?)) (optional)
- `message` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

**Slot Methods:**
- `with_left`
- `with_right`

---

### Decor::Tables::DataTableHeaderCell

<span id="decortablesdatatableheadercell"></span>

**Basic Usage:**
```ruby
render Decor::Tables::DataTableHeaderCell.new
```

**Key Attributes:**
- `title` (String?) (optional) - The string title to be rendered in the cell
- `stretch_divisor` (Integer?) (optional) - The stretch divisor, setting the stretch based on how many other stretch columns are present.
- `weight` (Union[:light, :regular, :medium], default: :medium) (optional) - Change default weight to medium - Default: `:medium`
- `sort_key` (Symbol?) (optional) - Sort key, if nil then column is not sortable
- `sorted_direction` (Union[:asc, :desc?]) (optional) - Current sort direction of the column


---

### Decor::Tables::DataTableHeaderRow

<span id="decortablesdatatableheaderrow"></span>

Table header row component that contains header cells and supports row selection. Used within data tables to define column headers with optional sorting and selection capabilities.

**Basic Usage:**
```ruby
render Decor::Tables::DataTableHeaderRow.new do |c|
  c.with_data_table_header_cell do
    # Slot content
  end
end
```

**Key Attributes:**
- `disabled` (Boolean, default: false) (optional) - Whether the row should get lower opacity or not - Default: `false`
- `selectable_as` (String?) (optional) - If row has a select box next to it
- `selected` (Boolean, default: false) (optional) - Whether the row should get an indicator on the left side - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Slot Methods:**
- `with_data_table_header_cell`

---

### Decor::Tables::DataTableRow

<span id="decortablesdatatablerow"></span>

A table row component that can contain multiple data cells, handle selection, provide hover effects, and include expandable content. Basic table row with standard cells

**Basic Usage:**
```ruby
render Decor::Tables::DataTableRow.new do |c|
  c.with_expanded_content do
    # Slot content
  end
end
```

**Key Attributes:**
- `hover_highlight` (Boolean?) (optional) - Background changes on hover
- `highlight` (Union[:graylow, :graymedium, :grayhigh, :low, :medium, :high, :primary, :secondary, :accent, :info, :success, :warning, :error?]) (optional) - Background is highlighted
- `disabled` (Boolean, default: false) (optional) - Whether the row should get lower opacity or not - Default: `false`
- `hidden` (Boolean, default: false) (optional) - Whether the row should be hidden or not - Default: `false`
- `selectable_as` (String?) (optional) - If row has a select box next to it
- `selected` (Boolean, default: false) (optional) - Whether the row should get an indicator on the left side - Default: `false`
- `path` (String?) (optional) - A row can optionally link to another page.
- `data_table_cells` (Array(::Decor::Tables::DataTableCell), default: -> { [] }) (optional) - Default: `[]`
- `form_builder` (::ActionView::Helpers::FormBuilder?) (optional) - is normally prepared by the data table builder when preparing the table row data.


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `color`: `:base`

**Slot Methods:**
- `with_expanded_content`
- `with_data_table_cell`

---

### Decor::Tabs

<span id="decortabs"></span>

Tabs A navigation component that displays a horizontal list of tabs. Tabs allow users to switch between different views or sections of content. They support various styles, sizes, colors, and can include icons and badges.

**Basic Usage:**
```ruby
render Decor::Tabs.new do |c|
  c.with_tab_buttons do
    # Slot content
  end
  "Content goes here"
end
```

**Redefined Properties:**
- `styles`: `ghost`, `bordered`, `lifted`, `boxed`

**Key Attributes:**
- `active` (Boolean, default: false, predicate: :public) (optional) - When active link gets visual indicator representing its state - Default: `false`
- `disabled` (Boolean, default: false, predicate: :public) (optional) - Default: `false`
- `title` (String?) (optional) - Title used as `title` attr in HTML and as content of `a` tag
- `href` (String?) (optional)
- `icon` (String?) (optional) - Icon configuration
- `icon_position` (Union[:before, :after, :only], default: :before) (optional) - Default: `:before`
- `badge_text` (String?) (optional) - Badge configuration
- `badge_color` (Union[:standard, :warning, :info, :error, :success, :primary, :secondary, :accent], default: :standard) (optional) - Default: `:standard`
- `links` (Array(TabInfo?), default: -> { [] } do |attrs|) (optional) - Array of links in navigation. Each link must have a `title` and `href` specified - Default: `-> { [] } do |attrs|`
- `status` (String?) (optional) - Status text is displayed to the right of the tabs


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:base`
- `style`: `:bordered`

**Slot Methods:**
- `with_tab_buttons`
- `with_tab_content`

---

## Modal Components

### Decor::Modals::ConfirmModal

<span id="decormodalsconfirmmodal"></span>

**Basic Usage:**
```ruby
render Decor::Modals::ConfirmModal.new
```

---

### Decor::Modals::Modal

<span id="decormodalsmodal"></span>

A modal is an overlay that blocks interaction, presenting necessary actions to the user. Modals should be used sparingly for critical interactions that require user attention. Generally, render only one modal at a time and reuse it by changing contents dynamically. A simple modal with text content

**Basic Usage:**
```ruby
render Decor::Modals::Modal.new
```

**Key Attributes:**
- `initial_content` (String?) (optional)
- `content_href` (String?) (optional)
- `start_shown` (Boolean, default: false) (optional) - Default: `false`
- `close_on_overlay_click` (Boolean, default: false) (optional) - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::Modals::ModalCloseButton

<span id="decormodalsmodalclosebutton"></span>

A button that triggers the modal close action, typically rendered inside modal views as a Cancel or OK button. The `close_reason` is passed to the modal's `onClose` callback. Key examples demonstrating common use cases for modal close buttons

**Basic Usage:**
```ruby
render Decor::Modals::ModalCloseButton.new do
  "Content goes here"
end
```

**Key Attributes:**
- `close_reason` (String?) (optional)


---

### Decor::Modals::ModalLayout

<span id="decormodalsmodallayout"></span>

**Basic Usage:**
```ruby
render Decor::Modals::ModalLayout.new do |c|
  c.with_header do
    # Slot content
  end
  "Content goes here"
end
```

**Redefined Properties:**
- `sizes`: `sm`, `md`, `lg`, `xl`

**Key Attributes:**
- `title` (String?) (optional)
- `description` (String?) (optional)
- `icon` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:base`
- `style`: `:filled`

**Slot Methods:**
- `with_header`
- `with_body`
- `with_footer`

---

### Decor::Modals::ModalOpenButton

<span id="decormodalsmodalopenbutton"></span>

Modal Open Button A button that triggers modal open actions. Inherits all button properties (style, color, size) and adds modal-specific functionality like content loading.

**Basic Usage:**
```ruby
render Decor::Modals::ModalOpenButton.new(modal_id: "...")
```

**Key Attributes:**
- `modal_id` (String, reader: :public) (required)
- `initial_content` (String?) (optional)
- `content_href` (String?) (optional)
- `close_on_overlay_click` (Boolean, default: false) (optional) - Default: `false`
- `type` (String?, default: "button") (optional) - Default: `"button"`


---

## Layout & Utility Components

### Decor::Chat::List

<span id="decorchatlist"></span>

Chat List A chat list component using daisyUI chat styling for displaying conversations. Supports different message types, avatars, timestamps, and empty states.

**Basic Usage:**
```ruby
render Decor::Chat::List.new do
  "Content goes here"
end
```

**Key Attributes:**
- `messages` (Array(::Decor::Chat::ListMessage), default: -> { [] }) (optional) - Default: `[]`
- `empty_state_title` (String, default: "No messages yet.") (optional) - Default: `"No messages yet."`
- `empty_state_description` (String, default: "Start a conversation by sending a message.") (optional) - Default: `"Start a conversation by sending a message."`


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::Chat::ListMessage

<span id="decorchatlistmessage"></span>

Chat Message Individual chat message component using daisyUI styling. Supports different message types, avatars, attachments, and user positioning.

**Basic Usage:**
```ruby
render Decor::Chat::ListMessage.new(author_name: "...") do
  "Content goes here"
end
```

**Key Attributes:**
- `author_name` (String(Predicate("present", &:present?))) (required)
- `author_initials` (String?) (optional)
- `author_profile_image_url` (String?) (optional)
- `localised_created_at` (Time, default: -> { Time.zone.now }) (optional) - Default: `Time.zone.now`
- `message` (String?) (optional)
- `is_current_user` (Boolean, default: false) (optional) - Default: `false`
- `show_avatar` (Boolean, default: true) (optional) - Default: `true`
- `show_timestamp` (Boolean, default: true) (optional) - Default: `true`
- `footer_text` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::ClickToCopy

<span id="decorclicktocopy"></span>

ClickToCopy A simple tag component which can be used to copy-on-click whatever text it is wrapped around. It provides visual feedback when text is copied and supports custom display text.

**Basic Usage:**
```ruby
render Decor::ClickToCopy.new do
  "Content goes here"
end
```

**Key Attributes:**
- `to_copy` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::CodeBlock

<span id="decorcodeblock"></span>

CodeBlock Multi-line code blocks with syntax highlighting support. Features include line numbers, copy functionality, filename display, and terminal style. Supports highlighting specific lines and various programming languages.

**Basic Usage:**
```ruby
render Decor::CodeBlock.new do
  "Content goes here"
end
```

**Redefined Properties:**
- `styles`: `default`, `terminal`

**Key Attributes:**
- `language` (String?) (optional)
- `highlight` (Boolean, default: false) (optional) - Default: `false`
- `show_line_numbers` (Boolean, default: false) (optional) - Default: `false`
- `highlight_lines` (Array?, default: [].freeze) (optional) - Default: `[].freeze`
- `filename` (String?) (optional)
- `copy_button` (Boolean, default: false) (optional) - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `style`: `:default`

---

### Decor::CodeSnippet

<span id="decorcodesnippet"></span>

CodeSnippet Inline code snippets with various styling options. Used to highlight code fragments within text content. Supports different styles and sizes for visual emphasis.

**Basic Usage:**
```ruby
render Decor::CodeSnippet.new do
  "Content goes here"
end
```

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:base`
- `style`: `:filled`

---

### Decor::Element

<span id="decorelement"></span>

**Basic Usage:**
```ruby
render Decor::Element.new do
  "Content goes here"
end
```

**Key Attributes:**
- `root_element_attributes` (Hash, default: -> { {} }, reader: :private) (optional) - Default: `{}`


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::EmptyState

<span id="decoremptystate"></span>

EmptyState An empty state component for displaying when there's no content to show. Typically includes an icon, title, description, and optional action buttons. Used for search results, empty lists, error states, and success confirmations.

**Basic Usage:**
```ruby
render Decor::EmptyState.new(
  icon_name: "star",
  title: "Title",
  description: "Description text"
)
```

**Key Attributes:**
- `icon_name` (String) (required)
- `title` (String) (required)
- `description` (String) (required)
- `primary_action_label` (String?) (optional)
- `primary_action_href` (String?) (optional)
- `secondary_action_label` (String?) (optional)
- `secondary_action_href` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::FormattedEncodedId

<span id="decorformattedencodedid"></span>

FormattedEncodedIdPreview A component to render an encoded id with a prefix in a consistent format.

**Basic Usage:**
```ruby
render Decor::FormattedEncodedId.new(encoded_id: "...") do
  "Content goes here"
end
```

**Key Attributes:**
- `encoded_id` (String(&:present?)) (required)
- `prefix` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::Map

<span id="decormap"></span>

Map An embedded Google Maps component with enhanced security, error handling, and standardized attributes. Supports different sizes, colors, and states with markers, overlays, and various map types.

**Basic Usage:**
```ruby
render Decor::Map.new(
  lat: "...",
  lng: "...",
  center: "...",
  api_key: "..."
)
```

**Redefined Properties:**
- `sizes`: `xs`, `sm`, `md`, `lg`, `xl`, `full`

**Key Attributes:**
- `name` (String?) (optional)
- `description` (String?) (optional)
- `lat` (Float) (required)
- `lng` (Float) (required)
- `disabled` (Boolean, default: false) (optional) - Default: `false`
- `interactive` (Boolean, default: true) (optional) - Map-specific props - Default: `true`
- `show_controls` (Boolean, default: true) (optional) - Default: `true`
- `map_type` (Union[:roadmap, :satellite, :hybrid, :terrain], default: :roadmap) (optional) - Default: `:roadmap`
- `center` (MapPoint) (required) - Core map props
- `points` (Array(MapPoint), default: -> { [] }) (optional) - Default: `[]`
- `overlays` (Array(Hash), default: -> { [] }) (optional) - Default: `[]`
- `zoom` (Integer, default: 10) (optional) - Default: `10`
- `full_width` (Boolean, default: true) (optional) - Default: `true`
- `api_key` (String) (required)
- `class` (String?) (optional) - Support for custom CSS classes


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:base`

---

### Decor::Page

<span id="decorpage"></span>

Page A page component that provides a structured layout with header, content sections, and customizable spacing, padding, and background options.

**Basic Usage:**
```ruby
render Decor::Page.new do |c|
  c.with_hero do
    # Slot content
  end
  "Content goes here"
end
```

**Key Attributes:**
- `flash_data` (ActionDispatch::Flash::FlashHash, default: -> { ActionDispatch::Flash::FlashHash.new }, reader: :private) (optional) - Default: `ActionDispatch::Flash::FlashHash.new`
- `include_flash` (Boolean, default: true) (optional) - Default: `true`
- `full_height` (Boolean, default: false) (optional) - Default: `false`
- `background` (Union[:default, :primary, :secondary, :hero, :neutral], default: :default) (optional) - Default: `:default`
- `padding` (Union[:none, :sm, :md, :lg, :xl], default: :md) (optional) - Default: `:md`
- `spacing` (Union[:none, :sm, :md, :lg, :xl], default: :md) (optional) - Default: `:md`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Slot Methods:**
- `with_hero`
- `with_header`
- `with_tabs`

---

### Decor::PageHeader

<span id="decorpageheader"></span>

PageHeader A flexible page header component for displaying page titles and metadata. Supports various layouts, backgrounds, and content slots for breadcrumbs, avatars, actions, and custom content areas.

**Basic Usage:**
```ruby
render Decor::PageHeader.new do |c|
  c.with_avatar do
    # Slot content
  end
end
```

**Key Attributes:**
- `title` (String?) (optional) - Content attributes
- `subtitle` (String?) (optional)
- `description` (String?) (optional)
- `layout` (Union[:default, :centered, :minimal, :hero, :compact, :pagelike], default: :default) (optional) - Layout configuration - Default: `:default`
- `background` (Union[:default, :hero, :gradient, :transparent], default: :default) (optional) - Default: `:default`
- `border` (Boolean, default: true) (optional) - Visual options - Default: `true`
- `padding` (Union[:none, :sm, :md, :lg, :xl], default: :md) (optional) - Default: `:md`
- `cta_snap_large` (Boolean, default: false) (optional) - Default: `false`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`

**Slot Methods:**
- `with_avatar`
- `with_title_content`
- `with_meta_content`
- `with_actions`
- `with_secondary_actions`
- `with_breadcrumbs`
- `with_status`
- `with_cta`
- `with_badge`
- `with_tag`

---

### Decor::PageSection

<span id="decorpagesection"></span>

**Basic Usage:**
```ruby
render Decor::PageSection.new do |c|
  c.with_hero do
    # Slot content
  end
  "Content goes here"
end
```

**Key Attributes:**
- `title` (String?) (optional)
- `description` (String?) (optional)
- `separator` (Boolean, default: false) (optional) - Default: `false`
- `background` (Union[:default, :primary, :secondary, :neutral], default: :default) (optional) - Modern attributes following Decor patterns - Default: `:default`
- `padding` (Union[:none, :sm, :md, :lg, :xl], default: :md) (optional) - Default: `:md`


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`

**Slot Methods:**
- `with_hero`
- `with_cta`
- `with_tag`

---

### Decor::Panel

<span id="decorpanel"></span>

Panel A simple panel component for displaying titled content sections, typically used within details boxes or cards. Panels provide a clean way to organize related content with an optional icon and title.

**Basic Usage:**
```ruby
render Decor::Panel.new(title: "Title") do
  "Content goes here"
end
```

**Key Attributes:**
- `title` (String) (required)
- `icon` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:base`
- `style`: `:filled`

---

### Decor::PanelGroup

<span id="decorpanelgroup"></span>

PanelGroup A panel group is a box with a title and description that contains a list of panels displayed in a grid layout. Each panel is a Decor::Panel component with its own content.

**Basic Usage:**
```ruby
render Decor::PanelGroup.new(title: "Title") do
  "Content goes here"
end
```

**Key Attributes:**
- `title` (String) (required)
- `description` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`
- `color`: `:base`
- `style`: `:filled`

---

### Decor::SearchAndFilter

<span id="decorsearchandfilter"></span>

SearchAndFilter A comprehensive search and filter component for data tables and lists. Combines search input with multiple filter types including select dropdowns, checkboxes, and date ranges. Perfect for filtering large datasets.

**Basic Usage:**
```ruby
render Decor::SearchAndFilter.new(
  type: :default,
  name: "field_name",
  label: "Label",
  value: "value",
  name: "field_name",
  label: "Label",
  value: "value",
  url: "/path"
) do |c|
  c.with_actions do
    # Slot content
  end
  "Content goes here"
end
```

**Key Attributes:**
- `type` (Union[:select, :checkbox, :daterange]) (required)
- `name` (String) (required)
- `label` (String) (required)
- `value` (String) (required)
- `disabled` (Boolean, default: false) (optional) - Default: `false`
- `placeholder` (String?) (optional)
- `options` (Array, default: [].freeze) (optional) - Default: `[].freeze`
- `disabled_options` (Array, default: [].freeze) (optional) - Default: `[].freeze`
- `apply` (Proc?) (optional)
- `name` (String) (required)
- `label` (String) (required)
- `value` (String) (required)
- `placeholder` (String?, default: "Search...") (optional) - Default: `"Search..."`
- `apply` (Proc?) (optional)
- `url` (String) (required)
- `filters` (Array(::Decor::SearchAndFilter::Filter), default: -> { [] }) (optional) - Default: `[]`
- `search` (Search?) (optional)
- `download_path` (String?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

**Slot Methods:**
- `with_actions`
- `with_filters`

---

### Decor::SearchResultsDropdown

<span id="decorsearchresultsdropdown"></span>

Mock nav element class that implements the required interface

**Basic Usage:**
```ruby
render Decor::SearchResultsDropdown.new(nav_element: "...")
```

**Key Attributes:**
- `nav_element` (Vident::StimulusComponent) (required)


_(and the shared properties `size`, `color`, and `style` as described above)_

---

### Decor::Svg

<span id="decorsvg"></span>

Svg An inline svg from a file path. Supports different sizes, inline/external loading, and accessibility attributes. You can also set the html class attribute using html_options[:class] or `element_classes` etc

**Basic Usage:**
```ruby
render Decor::Svg.new(file_name: "...")
```

**Key Attributes:**
- `inline` (Boolean, default: true) (optional) - Default: `true`
- `file_name` (String) (required)
- `title` (String?) (optional)
- `description` (String?) (optional)
- `width` (Integer?) (optional)
- `height` (Integer?) (optional)


_(and the shared properties `size`, `color`, and `style` as described above)_

**Default Shared Properties Values:**
- `size`: `:md`

---

### Decor::SwitchingBox

<span id="decorswitchingbox"></span>

SwitchingBox A switching box is a Box which shows content and contains a form and switch rendered on the right which submits on change. Used for switching things on and off outside of a form. Perfect for feature toggles, settings, and preferences.

**Basic Usage:**
```ruby
render Decor::SwitchingBox.new do |c|
  c.with_left do
    # Slot content
  end
end
```

**Key Attributes:**
- `switch_options` (Hash, default: -> { {} }) (optional) - Default: `{}`
- `property_name` (Symbol?) (optional) - The property to switch - or use the content block to create the switch
- `model` (Object?) (optional)
- `url` (String?) (optional)
- `http_method` (Symbol, default: :patch) (optional) - Default: `:patch`


**Slot Methods:**
- `with_left`

---

### Decor::Toggle

<span id="decortoggle"></span>

Toggle A switch component that can be toggled on or off and POSTs to a URL on change. Built with DaisyUI's toggle styling, this component provides a clean interface for boolean settings and preferences.

**Basic Usage:**
```ruby
render Decor::Toggle.new do
  "Content goes here"
end
```

**Key Attributes:**
- `switch_options` (Hash, default: -> { {} }) (optional) - Default: `{}`
- `checked_value` (String, default: "true") (optional) - Default: `"true"`
- `unchecked_value` (String, default: "false") (optional) - Default: `"false"`
- `property_name` (Interface(:tos?)) (optional) - The property to toggle - or use the content block to create the toggle
- `model` (Object?) (optional)
- `url` (Interface(:tos?)) (optional)
- `http_method` (Symbol, default: :patch) (optional) - Default: `:patch`


_(and the shared properties `size`, `color`, and `style` as described above)_

---

